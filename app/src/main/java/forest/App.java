/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package forest;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Random;
import java.util.Timer;
import java.util.TimerTask;
import java.awt.geom.Point2D;

public class App {
   private static String[] species = { "Pine", "Oak", "Cedar", "Juniper", "Fir", "Willow", "Redwood", "Sequoia", "Yew", "Hemlock"};
   private static ArrayList<Tree> forest = new ArrayList<Tree>();
   private static char[][] forestGrid = new char[100][100];

   private static int count = 0;
   private static Random rand = new Random();


    public static void main(String[] args) {
        Timer timer = new Timer();
            TimerTask tt = new TimerTask() {  
                @Override  
                public void run() {  
                    letNatureHappen();
                    count++;
                    if (count >= 200) {
                        timer.cancel();
                        timer.purge();
                        displayGrid();
                        return;
                    }                
                };  
            }; 

        timer.scheduleAtFixedRate(tt,500,10);        
    }  
    
    private static int[] returnRandomUnoccupiedPosition(){
        int[] randomCoordinates = null;
        while (randomCoordinates == null || positionIsOccupied(randomCoordinates) ) {
            randomCoordinates = new int[] {rand.nextInt((100 - 1) + 1) + 1, rand.nextInt((100 - 1) + 1) + 1};
        }
        return randomCoordinates;
    }

    private static String returnRandomSpecies(){
        return species[rand.nextInt(species.length)];
    }

    private static Boolean positionIsOccupied(int[] coordinates){
        for (Tree tree : forest){
            if (Arrays.equals(tree.isLocated(), coordinates)){
                System.out.println("Finding new home for the tree");          
                return true;
            } 
        }
        return false;
    }

    private static void letNatureHappen() {
        System.out.println("A beautiful new day dawns, and the sun is shining!");
        if (forest.size() < 50) {
            Tree tree = new Tree(returnRandomSpecies(), returnRandomUnoccupiedPosition());
            forest.add(tree); 
        }
        growAllTrees();
        System.out.println("\n");
    }

    private static void growAllTrees() {
        photosynthesiseUnshadedTrees();
        for(Tree tree : forest) {
            tree.grow();
            tree.isMature();
        }
    }

    private static void photosynthesiseUnshadedTrees(){
        ArrayList<Tree> photosynthesisers = new ArrayList<Tree>();
        for (Tree tree : forest) {
            Boolean isUnshaded = true;
            int index = 0;
            while (isUnshaded && index < forest.size()) {
                int heightDifferential = (forest.get(index).isHowTall() - tree.isHowTall());
                double distanceApart = Point2D.distance(tree.isLocated()[0], tree.isLocated()[1], forest.get(index).isLocated()[0], forest.get(index).isLocated()[1]);
                if (heightDifferential/distanceApart >= 4) {
                    isUnshaded = false;
                }
                index++;
            }
            if (isUnshaded) {
                photosynthesisers.add(tree);
            }
        }
        for (Tree tallEnough : photosynthesisers) {
            tallEnough.photosynthesise();
        }
    }

    private static void displayGrid(){
        for (Tree tree : forest) {
            System.out.println(tree.isHowTall());
            int posX = tree.isLocated()[1] - 1;
            int posY = tree.isLocated()[0] - 1;
            if (tree.isMature()) {
                forestGrid[posX][posY] = tree.species.charAt(0);
            } else {
                forestGrid[posX][posY] = Character.toLowerCase(tree.species.charAt(0));
            }
        }
        for (int i = 0; i < forestGrid.length; i++) {
            for (int j = 0; j < forestGrid.length; j++) {
                if (forestGrid[i][j] == '\u0000') {
                    System.out.printf("%s",'0');
                }
                System.out.printf("%s", forestGrid[i][j]);
            }
            System.out.printf("\n");
        }
    }
}

